

---------------------------------------------------First approach using double ended queue------------------------------------------------------------------------------------


/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode() : val(0), next(nullptr) {}
 *     ListNode(int x) : val(x), next(nullptr) {}
 *     ListNode(int x, ListNode *next) : val(x), next(next) {}
 * };
 */
class Solution {
public:
    bool isPalindrome(ListNode* head) {

       if (head->next == nullptr) return true;

        deque<ListNode*>q;
        while(head != NULL) {
            q.push_back(head );
            head = head->next;
        }

        while(!q.empty()) {
            if(q.size() == 1) break;
            if(q.front()->val != q.back()->val) {
                return false;
                break;
            }
            q.pop_front();
            q.pop_back();
        }
        return true;
    }
};



---------------------------------------------------------------optimized approach by reversing the list from the middle-----------------------------------------------------

/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode() : val(0), next(nullptr) {}
 *     ListNode(int x) : val(x), next(nullptr) {}
 *     ListNode(int x, ListNode *next) : val(x), next(next) {}
 * };
 */
class Solution {
public:
    bool isPalindrome(ListNode* head) {

        ListNode* curr = head;

        ListNode* slow = head;
        ListNode* fast = head;
        while(fast && fast->next) {
            fast = fast->next->next;
            slow = slow->next;
        }
        ListNode* prev = nullptr;
        while(slow) {
            ListNode* nextNode = slow->next;
            slow->next = prev;
            prev = slow;
            slow = nextNode;
        }

        while(prev && curr) {
            if(prev->val == curr->val) {
                prev = prev->next;
                curr = curr->next;
            } else {
                return false;
                break;
            }
        }
        return true;
    }
};
