

-------------------------------------------------------------- First approach has the O(N*N) TC =================================================================
/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
     
    int  height(TreeNode* root) {
        if (root == NULL) {
            return 0;
        }

        int LeftHt = height(root->left);
        int rightHt = height(root->right);
        return max(LeftHt , rightHt) + 1;
    }

    int diameterOfBinaryTree(TreeNode* root) {

      if ( root == NULL) {
        return NULL;
      }  

      int leftdiam = diameterOfBinaryTree(root->left);
      int rightdiam = diameterOfBinaryTree(root->right);

      int Currdiam = height(root->left) + height(root->right);

      return max(Currdiam , max(leftdiam , rightdiam));
    }
};



===================================================================== this approach has the O(n) TC =====================================================================
/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
     int ans = 0;
    int  height(TreeNode* root) {
        if (root == NULL) {
            return 0;
        }

        int LeftHt = height(root->left);
        int rightHt = height(root->right);

         ans = max(ans ,LeftHt+rightHt); //Current diameter of the root
        return max(LeftHt , rightHt) + 1;
    }

    int diameterOfBinaryTree(TreeNode* root) {

     height(root);
     return ans;
    }
};
