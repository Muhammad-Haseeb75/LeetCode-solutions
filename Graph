#include<vector>
#include<queue>
#include<iostream>
#include<list>
using namespace std;


class Graph{
int V;
list<int> *l;

 public:

 Graph(int V) {
 	this->V = V;
 	l = new list<int>[V];
 }
 
 void addEdges(int u , int v) {
 	l[u].push_back(v);
 	l[v].push_back(u);
 }
 
 void print() {
 	for(int i=0; i<V; i++) {
 		cout << i << " : ";
 		for(int neigh : l[i]) {
 			cout << neigh << " ";
		 }
		 cout << endl;
	 }
 }


   void BFS(int start) {
   	vector<bool> Visited(V , false);
   	queue<int>q;
   	
   	q.push(start);
   	Visited[start] = true;
   	
   	while(!q.empty()) {
   		int u = q.front();
   		q.pop();
   		
   		cout << u << "  ";
   		
   		for(int v : l[u]) {
   			if(!Visited[v]) {
   				q.push(v);
   				Visited[v] = true;
			   }
		   }
	   }
    }
    
    void dfsHelper(int u , vector<bool>& vis) {
    	cout << u << " ";
    	vis[u] = true;
    	
    	for(int v : l[u]) {
    		if(!vis[v]) {
    			dfsHelper(v , vis);
			}
		}
	}
    
    void DFS() {
    	vector<bool>vis(V , false);
    	int src = 0;
    	
    	dfsHelper(src , vis);
	}
};

int main() {
	Graph g(9);
	
	g.addEdges(0 , 1);
	g.addEdges(1 , 2);
	g.addEdges(1 , 5);
	g.addEdges(2 , 3);
	g.addEdges(3 , 8);
	g.addEdges(3 , 4);
	g.addEdges(4 , 5);
	g.addEdges(4 , 7);
	g.addEdges(5 , 6);
 
	 cout << "Simple Graph : \n";
	 g.print();
	 cout << endl;
	 
	 cout << "BFS Traversal : ";
     g.BFS(0);  
     cout << endl;
     
     cout << "DFS Traversal : ";
     g.DFS();
}
